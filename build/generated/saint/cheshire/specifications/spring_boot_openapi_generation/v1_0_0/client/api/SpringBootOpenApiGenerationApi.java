/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package saint.cheshire.specifications.spring_boot_openapi_generation.v1_0_0.client.api;

import saint.cheshire.specifications.spring_boot_openapi_generation.v1_0_0.client.model.SomeEndpointErrorResponse;
import saint.cheshire.specifications.spring_boot_openapi_generation.v1_0_0.client.model.SomeEndpointRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-11-17T23:27:58.758048700+03:00[Europe/Moscow]")
@Validated
@Tag(name = "SpringBootOpenApiGeneration", description = "Spring boot openapi generation service API")
public interface SpringBootOpenApiGenerationApi {

    /**
     * POST /api/v1/some-endpoint : Описание логики спрятанной за эндпоинтом
     *
     * @param someEndpointRequest Тело запроса на выполнение какой-то логики (required)
     * @return Логика успешно выполнена (status code 200)
     *         or Нарушение контракта (status code 400)
     *         or Какая-то страшная внутренняя ошибка (status code 500)
     */
    @Operation(
        operationId = "someEndpoint",
        summary = "Описание логики спрятанной за эндпоинтом",
        tags = { "SpringBootOpenApiGeneration" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Логика успешно выполнена"),
            @ApiResponse(responseCode = "400", description = "Нарушение контракта", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SomeEndpointErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Какая-то страшная внутренняя ошибка", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SomeEndpointErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/some-endpoint",
        produces = "application/json",
        consumes = "application/json"
    )
    
    ResponseEntity<Void> someEndpoint(
        @Parameter(name = "SomeEndpointRequest", description = "Тело запроса на выполнение какой-то логики", required = true) @Valid @RequestBody SomeEndpointRequest someEndpointRequest
    );

}
